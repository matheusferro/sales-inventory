version: '3.8'

services:

  inventoryService:
    build:
      context: ./
      dockerfile: ./Dockerfile
    image: inventory-service
    networks:
      - internal
    ports:
      - "8085:8085"
      - "5005:5005"
    environment:
      DB_URL: mongodb://mongodb:27017/teste?replicaSet=rs0
      CONDUCTOR_URL: http://conductor-server:8080
      CONDUCTOR_CLIENT_URL: http://conductor-server:8080/api/
#      DB_USER: ${MONGODB_USR}
#      DB_PWD: ${MONGODB_PWD}
#      DB_NAME: ${MONGODB_NAME}
    depends_on:
      conductor-server:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      mongodb2:
        condition: service_healthy

  mongodb-setup:
    image: mongo:4.1
    restart: no
    command: >
      mongo --host mongodb:27017 --eval
      '
      replicaSetConfig = {
        "_id":"rs0",
        "members":[
          { "_id": 0, "host": "mongodb:27017" },
          { "_id": 1, "host": "mongodb2:27017" }
        ]
      };
      rs.initiate(replicaSetConfig);
      '
    depends_on:
      mongodb:
        condition: service_healthy
      mongodb2:
        condition: service_healthy
    networks:
      - internal

  mongodb:
    image: mongo:4.1
    restart: always
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0" ]
    healthcheck:
      test: echo 'db.runCommand("ping").ok | mongo mongodb:27017/test --quiet'
      interval: 3s
      timeout: 30s
      retries: 10
      start_period: 1s
    networks:
      - internal
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USR}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PWD}

  mongodb2:
    image: mongo:4.1
    restart: always
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0" ]
    healthcheck:
      test: echo 'db.runCommand("ping").ok | mongo mongodb:27017/test --quiet'
      interval: 3s
      timeout: 30s
      retries: 10
      start_period: 1s
    networks:
      - internal
    ports:
      - "27018:27017"

  mongodb-express:
    image: mongo-express
    restart: always
    networks:
      - internal
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGODB_USR}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGODB_PWD}
      ME_CONFIG_MONGODB_URL: mongodb://mongodb:27017/admin?replicaSet=rs0&retrywrites=false
    depends_on:
      mongodb:
        condition: service_healthy
      mongodb2:
        condition: service_healthy

  conductor-server:
    environment:
      - CONFIG_PROP=config-local.properties
    image: conductor:server
#    build:
#      context: ../
#      dockerfile: docker/server/Dockerfile
    networks:
      - internal
    ports:
      - "8080:8080"
    healthcheck:
      test: [ "CMD", "curl","-I" ,"-XGET", "http://localhost:8080/health" ]
      interval: 5s
      timeout: 60s
      retries: 12
    links:
      - elasticsearch:es
    depends_on:
      elasticsearch:
        condition: service_healthy
    logging:
      driver: "json-file"
      options:
        max-size: "1k"
        max-file: "3"

  conductor-ui:
    environment:
      - WF_SERVER=http://conductor-server:8080
    image: conductor:ui
#    build:
#      context: ../
#      dockerfile: docker/ui/Dockerfile
    networks:
      - internal
    ports:
      - "5000:5000"
    links:
      - conductor-server
    stdin_open: true

  elasticsearch:
    image: elasticsearch:6.8.15
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx1024m"
      - transport.host=0.0.0.0
      - discovery.type=single-node
      - xpack.security.enabled=false
    volumes:
      - esdata-conductor:/usr/share/elasticsearch/data
    networks:
      - internal
    ports:
      - "9200:9200"
      - "9300:9300"
    healthcheck:
      test: timeout 5 bash -c 'cat < /dev/null > /dev/tcp/localhost/9300'
      interval: 5s
      timeout: 5s
      retries: 12
    logging:
      driver: "json-file"
      options:
        max-size: "1k"
        max-file: "3"

volumes:
  esdata-conductor:
    driver: local

networks:
  internal:
    driver: bridge
